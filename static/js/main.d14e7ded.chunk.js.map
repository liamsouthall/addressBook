{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","numbers","current","inputSwitch","tempObj","name","number","enterHandler","event","storedNums","tempObj1","key","setState","console","log","push","changeHandler","target","value","delete","index","splice","type","className","placeholder","this","onChange","onKeyDown","map","num","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0PAmEeA,G,iNA/DbC,MAAQ,CACNC,QAAS,GACTC,QAAS,GACTC,aAAa,EACbC,QAAS,CAAEC,KAAM,GAAIC,OAAQ,K,EAG/BC,aAAe,SAAAC,GACb,IAAIC,EAAU,YAAO,EAAKT,MAAMC,SAC5BS,EAAW,EAAKV,MAAMI,QACR,UAAdI,EAAMG,OACuB,IAA3B,EAAKX,MAAMG,aACbO,EAASL,KAAO,EAAKL,MAAME,QAC3B,EAAKU,SAAS,CAAER,QAASM,EAAUR,QAAS,GAAIC,aAAa,IAC7DU,QAAQC,IAAI,EAAKd,MAAMC,SACvBY,QAAQC,IAAI,EAAKd,MAAMI,WAEvBM,EAASJ,OAAS,EAAKN,MAAME,QAC7B,EAAKU,SAAS,CAAER,QAASM,IACzBG,QAAQC,IAAI,EAAKd,MAAMI,SACvBK,EAAWM,KAAK,EAAKf,MAAMI,SAC3BS,QAAQC,IAAIL,GACZ,EAAKG,SAAS,CAAEX,QAASQ,EAAYP,QAAS,GAAIC,aAAa,O,EAKrEa,cAAgB,SAAAR,GACd,EAAKI,SAAS,CAAEV,QAASM,EAAMS,OAAOC,S,EAGxCC,OAAS,SAAAC,GACP,EAAKR,SAAS,EAAKZ,MAAMC,QAAQoB,OAAOD,EAAO,K,wEAGvC,IAAD,OACP,OACE,6BACE,4CACA,2BACEE,KAAK,OACLC,UAAU,QACVC,YAAaC,KAAKzB,MAAMG,YAAc,aAAe,eACrDe,MAAOO,KAAKzB,MAAME,QAClBwB,SAAU,SAAAlB,GACR,EAAKQ,cAAcR,IAErBmB,UAAW,SAAAnB,GAAK,OAAI,EAAKD,aAAaC,MAEvCiB,KAAKzB,MAAMC,QAAQ2B,KAAI,SAACC,EAAKT,GAC5B,OACE,yBAAKT,IAAKS,GACR,2BAAIS,EAAIxB,MACR,2BAAIwB,EAAIvB,QACR,4BAAQwB,QAAS,kBAAM,EAAKX,OAAOC,KAAnC,c,GAvDIW,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.d14e7ded.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    numbers: [],\n    current: \"\",\n    inputSwitch: true,\n    tempObj: { name: \"\", number: \"\" }\n  };\n\n  enterHandler = event => {\n    let storedNums = [...this.state.numbers];\n    let tempObj1 = this.state.tempObj;\n    if (event.key === \"Enter\") {\n      if (this.state.inputSwitch === true) {\n        tempObj1.name = this.state.current;\n        this.setState({ tempObj: tempObj1, current: \"\", inputSwitch: false });\n        console.log(this.state.numbers);\n        console.log(this.state.tempObj);\n      } else {\n        tempObj1.number = this.state.current;\n        this.setState({ tempObj: tempObj1 });\n        console.log(this.state.tempObj);\n        storedNums.push(this.state.tempObj);\n        console.log(storedNums);\n        this.setState({ numbers: storedNums, current: \"\", inputSwitch: true });\n      }\n    }\n  };\n\n  changeHandler = event => {\n    this.setState({ current: event.target.value });\n  };\n\n  delete = index => {\n    this.setState(this.state.numbers.splice(index, 1));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Address Book</h1>\n        <input\n          type=\"text\"\n          className=\"Input\"\n          placeholder={this.state.inputSwitch ? \"Write Name\" : \"Write Number\"}\n          value={this.state.current}\n          onChange={event => {\n            this.changeHandler(event);\n          }}\n          onKeyDown={event => this.enterHandler(event)}\n        ></input>\n        {this.state.numbers.map((num, index) => {\n          return (\n            <div key={index}>\n              <p>{num.name}</p>\n              <p>{num.number}</p>\n              <button onClick={() => this.delete(index)}>x</button>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}